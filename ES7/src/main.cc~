#include <systemc.h>
#include <tlm.h>
#include "../include/transactor_RTL_TLM.hh"
#include "../include/fpm_TLM_LT_testbench.hh"
#include "../include/fpm_RTL.hh"

#define PERIOD 10

SC_MODULE(main_RTL)
{
  
  // CLOCK SIGNAL
  sc_signal< sc_dt::sc_logic > clock;

  void clk_gen()
  {
    while( true )
    {
      clock.write( sc_dt::SC_LOGIC_1 );
      wait( PERIOD / 2, sc_core::SC_NS );
      clock.write( sc_dt::SC_LOGIC_0 );
      wait( PERIOD / 2, sc_core::SC_NS );
    }
  }

  // RESET SIGNAL
  sc_signal < sc_logic >        reset_signal;
  
  // OTHER SIGNALS
  sc_signal<sc_logic >  	number_is_rdy;
  sc_signal<sc_lv<64> > 	data1;
  sc_signal<sc_lv<64> > 	data2;
  sc_signal<sc_logic >  	result_is_rdy;
  sc_signal<sc_lv<64> > 	ris;

  //Definition   
  mul_LT_testbench		i_src_LT;	       // source module
  root_RTL_transactor		i_root_RTL_transactor; // root transactor  
  divModule			i_root_RTL;    // root RTL module
    
  //Construct
  SC_CTOR(main_RTL)
    : i_src_LT("i_src_LT")
    , i_root_RTL_transactor("i_root_RTL_transactor")
    , i_root_RTL("i_root_RTL")
  {
      
    SC_THREAD( clk_gen );

    // TLM testbench <-> Transactor binding (TLM interface)
    i_src_LT.initiator_socket(i_root_RTL_transactor.target_socket);
		
    // RTL design <-> Transactor binding (RTL interfaces)
    i_root_RTL.clk(clock);
    i_root_RTL.rst(reset_signal);
    i_root_RTL.start(number_is_rdy);
    i_root_RTL.op1in(data1);
    i_root_RTL.op2in(data2);
    i_root_RTL.result(ris);
    i_root_RTL.done(result_is_rdy);
 

    i_root_RTL_transactor.clk(clock);
    i_root_RTL_transactor.reset_to_RTL(reset_signal);
    i_root_RTL_transactor.p_In_enable(result_is_rdy);
    i_root_RTL_transactor.p_In_data(ris);
    i_root_RTL_transactor.p_Out_enable(number_is_rdy);
    i_root_RTL_transactor.p_Out_data1(data1);
    i_root_RTL_transactor.p_Out_data2(data2);
 
	
  }





};

int sc_main(int argc, char **argv)
{
  sc_report_handler::set_actions("/IEEE_Std_1666/deprecated", SC_DO_NOTHING);
  main_RTL* topl;

  topl = new main_RTL("topl");

  sc_start();

  return(0);

};

